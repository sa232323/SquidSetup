android=Android
core=Core
desktop=Desktop (legacy)
ios=iOS
ios-moe=iOS MOE
jglfw=JGLFW
lwjgl3=LWJGL3 (new desktop)
html=HTML
headless=Headless
shared=Shared
server=Server

scala=Scala
scalaUrl=http://www.scala-lang.org/
kotlin=Kotlin
kotlinUrl=https://kotlinlang.org/
groovy=Groovy
groovyUrl=http://www.groovy-lang.org/

gdx-ai=AI
ashley=Ashley
gdx-box2d=Box2D
box2dlights=Box2D Lights
gdx-bullet=Bullet
gdx-controllers=Controllers
gdx-freetype=Freetype
gdx-tools=Tools

overlap2d=Overlap2D
artemisOdb=Artemis-odb
visUi=VisUI
visRuntime=VisRuntime
usl=USL
utils=LibGDX Utils
utilsBox2d=LibGDX Utils Box2D
facebook=GDX Facebook
dialogs=GDX Dialogs
inGameConsole=In-game Console
jaci=JACI
jaciGwt=JACI GWT
noise4j=Noise4J
kiwi=Kiwi
lml=LML
lmlVis=LML Vis
autumn=Autumn
autumnMvc=Autumn MVC
websocket=WebSocket
websocketSerialization=WebSocket Serialization
regExodus=RegExodus
squidLibUtil=SquidLib Util
squidLib=SquidLib
squidLibExtra=SquidLib Extra
bladeInk=Blade Ink
ktxActors=KTX Actors
ktxApp=KTX App
ktxAshley=KTX Ashley
ktxAssets=KTX Assets
ktxAsync=KTX Async
ktxBox2d=KTX Box2D
ktxCollections=KTX Collections
ktxI18n=KTX I18n
ktxInject=KTX Inject
ktxLog=KTX Log
ktxMath=KTX Math
ktxScene2D=KTX Scene2D
ktxStyle=KTX Style
ktxVis=KTX VisUI
ktxVisStyle=KTX VisUI Style
joise=Joise
typingLabel=TypingLabel

issues=https://github.com/tommyettinger/SquidSetup/issues
ok=OK
titlePad=4

emptyTemplate=Empty
applicationListener=ApplicationListener
applicationAdapter=ApplicationAdapter
inputProcessor=InputProcessor
gameTemplate=Game
scene2dTemplate=Scene2D*
classic=Classic

autumnMvcBasicTemplate=Autumn MVC Basic*
autumnMvcVisTemplate=Autumn MVC + VisUI
autumnMvcBox2dTemplate=Autumn MVC + Box2D + VisUI
lmlTemplate=LML Basic*
noise4jTemplate=Noise4J
kiwiTemplate=Kiwi AbstractApplicationListener
kiwiInputTemplate=Kiwi InputAwareApplicationListener
webSocketBasicTemplate=WebSocket Basic
visUiBasicTemplate=VisUI Basic
visUiShowcaseTemplate=VisUI Showcase
visEditorBasicTemplate=VisEditor Basic
squidLibBasicTemplate=SquidLib Basic

pl=Polski
en=English

### THESE LINES SHOULD BE TRANSLATED:

# FileChooser I18N:
titleChooseFiles=Choose file
titleChooseDirectories=Choose directory
titleChooseFilesAndDirectories=Choose directory or file
cancel=Cancel
fileName=File name
fileType=File type
allFiles=All files (*.*)
#desktop=Desktop
computer=Computer
# Used on confirm button when dialog is in OPEN mode
open=Open
# Used on confirm button when dialog is in SAVE mode
save=Save
back=Back
forward=Forward
parentDirectory=Parent directory
newDirectory=New directory
directoryNoLongerExists=Directory does no longer exist!
popupTitle=Message
popupChooseFile=You must choose a file!
popupSelectedFileDoesNotExist=Selected files do not exist!
popupDirectoryDoesNotExist=This directory does not exist!
popupOnlyDirectories=Only directories are allowed!
popupFilenameInvalid=File name is invalid!
popupFileExistOverwrite=This file already exist, do you want to overwrite it?
popupMultipleFileExistOverwrite=Those files already exist, do you want to overwrite them?
popupDeleteFileFailed=Error occurred while removing file
# Used when file can't be moved to system trash and has to be deleted permanently
contextMenuDelete=Delete
# Used when file can be moved to system trash
contextMenuMoveToTrash=Move to trash
contextMenuNewDirectory=New directory
contextMenuShowInExplorer=Show in explorer
contextMenuAddToFavorites=Add to favorites
contextMenuRemoveFromFavorites=Remove from favorites
contextMenuDeleteWarning=This file will be deleted permanently. Are you sure?
contextMenuMoveToTrashWarning=This file will be moved to trash. Are you sure?
contextMenuRefresh=Refresh
contextMenuSortBy=Sort by
sortByName=Name
sortByDate=Date modified
sortBySize=Size
sortByAscending=Ascending
sortByDescending=Descending
newDirectoryDialogTitle=New directory
newDirectoryDialogText=Name:
newDirectoryDialogIllegalCharacters=Directory name contains illegal characters
newDirectoryDialogAlreadyExists=Directory with that name already exists
changeViewMode=Change view mode
viewModeList=List
viewModeDetails=Details
viewModeBigIcons=Big icons
viewModeMediumIcons=Medium icons
viewModeSmallIcons=Small icons

prompt0=Create a new
prompt1=project!

namePrompt=Choose the name of your project.
nameTip=Name has to be a valid file name. Can contain letters, numbers, underscores and dashes. For example: "YourGame", "your-game".
packagePrompt=Enter the name of the core package.
packageTip=Package has to be a valid Java identifier. Should contain at least one dot for Android compatibility. For example: "com.yourcompany.yourgame".
classPrompt=Enter the name of the main class.
classTip=Main class has to be a valid Java identifier. Cannot start with a number. For example: "Center", "Main", "TopLevel", "YourGame".
destinationPrompt=Choose an empty folder for the project.
destinationTip=Project destination directory has to be empty. Click on the icon to the right to choose a folder.
mkdirsTip=Create folder.
clearFolderTip=Delete folder content.
androidSdkPrompt=Provide the path to your Android SDK.
sdkTip=A valid path to your Android SDK. Click on the icon to the right to choose the folder.
useOldestSdkTip=Use oldest installed Android API and build tools versions. See "Advanced" settings for more info.
useLatestSdkTip=Use latest installed Android API and build tools versions. See "Advanced" settings for more info.

warn=Warning
deletePrompt=Are you sure you want to delete folder content?
yes=Yes
no=No
deleteError=Unable to clear folder. Try again.

name=Project
package=Package
class=Main class
notEmpty={0} name cannot be empty.
nameNotValid=Project name has to contain only letters, numbers, underscores (_) and dashes (-).
classNotValid=Main class name is not a valid Java identifier.
packageNotValid=Package name is not a valid Java identifier.
notDirectory=Selected destination is not a directory.
sdkNotDirectory=Selected Android SDK path is not a directory.
invalidSdkDirectory=Selected directory does not seem to contain fully installed Android SDK.
notEmptyDirectory=Project destination folder has to be empty.

notUpToDate=There seems to be a newer SquidSetup version.
downloadLatest=Download latest SquidSetup.

platforms=Platforms
platformsPrompt=Hover for more info.
toggleClientPlatforms=Toggle client platforms
toggleAllPlatforms=Toggle all platforms
androidTip=Android mobile platform. Needs Android SDK.
coreTip=Other projects have access to its code; usually most code is in core.
desktopTip=LWJGL2, which works on every major desktop platform, but is no longer being updated; you should usually use LWJGL3 instead.
iosTip=iOS mobile platform. Uses RoboVM. This platform may be out of date.
ios-moeTip=iOS mobile platform. Uses Multi-OS Engine. This platform may be out of date.
jglfwTip=Alternative desktop platform using JGLFW; lacks some features and is less documented than LWJGL3.
lwjgl3Tip=Primary desktop platform using LWJGL3; replaces the older Desktop platform, which uses LWJGL2.
htmlTip=GWT WebGL platform. Supports only the Java language. Some extensions might not be compatible with GWT.
headlessTip=Headless platform. Has access to the core project. Useful for testing or setting up a server application. Can be used along with gdx-tools as a utility project.
sharedTip=Code shared between core and server projects.
serverTip=Optional server project.

languages=Languages
language=Language:
languageVersion=Version:
languageLink=Info:
languagesPrompt=Note: additional languages do not work with the GWT platform.
clojurePrompt=See "play-clj" for a Clojure LibGDX wrapper, or just use Clojure's Java interop.
otherLanguagesPrompt=Check out this article for more info about other JVM languages.

extensions=Extensions
gdx-aiTip=Artificial intelligence utilities.
ashleyTip=Entity system.
gdx-box2dTip=2D physics engine.
box2dlightsTip=Lights system for the 2D physics engine.
gdx-bulletTip=3D physics engine. GWT-incompatible.
gdx-controllersTip=Official controllers support.
gdx-freetypeTip=Official TTF fonts support. GWT-incompatible.
gdx-toolsTip=Various LibGDX tools. Desktop and headless projects only.
gdxPayPrompt=See gdx-pay for cross-platform in-app purchasing.

thirdParty=Third-party
thirdPartyPrompt=Ordered (somewhat) alphabetically. Hover over extension names for more info.
thirdPartyWarn=These extensions are NOT provided by the official LibGDX maintainers.
thirdPartyLink=Missing your extension? Let us know!
overlap2dTip=UI and level 2D editor runtime. GWT-incompatible.
artemisOdbTip=High performance Entity-Component-System framework.
visUiTip=Flat design skin for scene2d.ui and UI toolkit.
visRuntimeTip=Runtime for VisEditor. Selecting VisRuntime will also include Artemis-odb extension.
uslTip=Alternative to writing skins in JSON, supporting more powerful syntax and simpler skin extending
utilsTip=Various utilities and features.
utilsBox2dTip=Various utilities and features for the Box2D extension.
facebookTip=Cross-platform support for Facebook Graph API. GWT-incompatible.
dialogsTip=Cross-platform support for native dialogs. GWT-incompatible.
inGameConsoleTip=In-game console implementation. Useful for testing, development and debugging.
jaciTip=Java Annotation Console Interface. In-game console implementation. GWT-incompatible.
jaciGwtTip=Java Annotation Console Interface. In-game console implementation. GWT-compatible, but limited - uses LibGDX reflection API.
noise4jTip=Cross-platform map generators.
kiwiTip=Guava-inspired utilities for LibGDX.
lmlTip=Parser of HTML-like templates that produces Scene2D widgets.
lmlVisTip=Parser of HTML-like templates that produces VisUI widgets.
autumnTip=Dependency injection mechanism with automatic component scan. Limited on iOS platform (no automatic scanner on this platform - for now).
autumnMvcTip=Model-view-controller framework on top of LibGDX, Autumn and LML.
websocketTip=Cross-platform web sockets client.
websocketSerializationTip=Custom, efficient serialization mechanism that does not rely on reflection and works on every platform. Alternative to JSON serialization for web sockets extension.
regExodusTip=Regular expression engine that works equivalently on all targets, including GWT.
squidLibUtilTip=Logic, content generation, and AI for grid-based games such as roguelikes.
squidLibTip=Support for text-based display common in roguelike games.
squidLibExtraTip=Serialization for squidlib-util objects.
bladeInkTip=Java implementation of Ink: a scripting language for writing interactive narrative.
ktxActorsTip=Kotlin general utilities for Scene2D actors.
ktxAshleyTip=Kotlin utilities for Ashley entity component system.
ktxAppTip=Kotlin utilities for ApplicationListener implementations.
ktxAssetsTip=Kotlin utilities for managing assets and heavy objects.
ktxAsyncTip=Kotlin coroutines context and utilities for asynchronous operations.
ktxBox2dTip=Kotlin Box2D type-safe builders and utilities.
ktxCollectionsTip=Kotlin utilities for LibGDX custom collections.
ktxI18nTip=Kotlin utilities for internationalization.
ktxInjectTip=Simple (yet powerful) dependency injection powered by Kotlin.
ktxLogTip=Little-to-none runtime overhead logging mechanism powered by Kotlin inlined lambdas.
ktxMathTip=Kotlin utilities (including overloaded operators) for LibGDX math-related classes.
ktxScene2DTip=Little-to-none runtime overhead type-safe Kotlin GUI builders.
ktxStyleTip=Little-to-none runtime overhead type-safe Kotlin GUI widget styles builders.
ktxVisTip=Kotlin VisUI widget builders.
ktxVisStyleTip=Little-to-none runtime overhead type-safe Kotlin VisUI widget styles builders.
joiseTip=2D, 3D, 4D and 6D modular noise library written in Java.
typingLabelTip=An animated Label equivalent that appears as if it was being typed in real time.

templates=Templates
templatesPrompt=Templates generate basic sources of your project to quickly get you started.
officialTemplates=Official:
officialTemplatesTip="Official" templates use only core LibGDX libraries and require no third-party extensions.
thirdPartyTemplates=Third-party:
thirdPartyTemplatesTip=Third-party templates demonstrate usage of additional LibGDX extensions. They are usually provided by the authors of used third-party libraries.
templatesStar=Templates marked with * require running "pack" Gradle task, as they use the default GUI skin.
templatesTip=Hover over radio buttons for more info.
templatesLink=Missing your favorite setup? Propose a new template!
emptyTemplateTip=Generates no sources at all.
applicationListenerTip=Generates basic application launchers. Main class implements ApplicationListener. Application initially does nothing.
applicationAdapterTip=Generates basic application launchers. Main class extends ApplicationAdapter. Application initially does nothing.
inputProcessorTip=Generates basic application launchers. Main class implements ApplicationListener and extends InputAdapter to handle input  events. Application sets itself as global InputProcessor.
gameTemplateTip=Generates basic application launchers. Main class extends Game. Application sets FirstScreen as its first view. The initial screen is empty.
scene2dTemplateTip=Generates basic application launchers. Main class extends ApplicationAdapter and creates a basic Scene2D Stage. Forces generation of GUI assets. Make sure to execute "gradle pack" command before running the application.
classicTip=Based on the previous SquidSetup application. Generates basic application launchers. Main class extends ApplicationAdapter and draws a simplistic Badlogic Games logo on the screen.
autumnMvcBasicTemplateTip=Shows how to construct a simple view using Autumn MVC framework. Uses default skin. Make sure to execute "gradle pack" command before running the application.
autumnMvcVisTemplateTip=Shows advanced usage of Autumn MVC framework. Allows to create VisUI widgets thanks to gdx-lml-vis extension. A solid base for Autumn MVC applications.
autumnMvcBox2dTemplateTip=An advanced example of Autumn MVC application. Uses Box2D, Controllers and VisUI extensions. Provides a simple Box2D world. Allows the players to set up their controls. Provides settings dialog. A solid base for platformer games using Box2D.
lmlTemplateTip=Uses gdx-lml GUI library. This is the Scene2D template with its GUI created using LML. Note that it shows only basic LML usage: there are even less verbose ways to include LML in your project (see other LML templates). Uses default skin. Make sure to execute "gradle pack" command before running the application.
noise4jTemplateTip=Uses noise4j library to generate random maps at runtime. Click to generate a new map.
kiwiTemplateTip=Uses gdx-kiwi utility library. This is the "classic" template updated with some Kiwi utility classes.
kiwiInputTemplateTip=The main class extends InputAwareApplicationListener, which allows it to listen to both application and user input events. Draws Badlogic Games logo at the center of the screen and changes its color when clicked/touched.
webSocketBasicTemplateTip=Basic usage of gdx-websocket extension. Shows usage of cross-platform web sockets client. Allows to connect with an external web socket server and send string messages. Uses VisUI library to create a simple GUI.
visUiBasicTemplateTip=Simple example showing how to include VisUI in your project.
visUiShowcaseTemplateTip=Example VisUI application with menu bar and widget showcase.
visEditorBasicTemplateTip=Example application showing how to load exported VisEditor project. Included sample project can be also opened in VisEditor.
squidLibBasicTemplateTip=Simple application showing basic usage of the SquidLib extension.

advanced=Advanced
localePrompt=Change language:
localeWarn=Warning: reloads application.
version=Application version:
versionTip=Used as your application's version when building archives with Gradle.
gdxVersion=LibGDX version:
gdxVersionTip=Version of the official LibGDX libraries. The latest release was {0}.
gwtVersion=GWT version:
gwtVersionTip=Version of GWT libraries. Should match version used to build the GWT backend. Defaults to 2.8.0. Other versions are NOT guaranteed to work out of the box due to API changes. Pre-1.9.5 LibGDX uses GWT 2.6.1.
gwtPlugin=GWT plugin version:
gwtPluginTip=Version of the Gradle plugin for GWT applications: de.richsource.gradle.plugins:gwt-gradle-plugin
sdkVersion=Target Android API:
sdkVersionTip=Version of the targeted Android API.
toolsVersion=Build tools version:
toolsVersionTip=Version of the Android build tools.
androidPluginVersion=Android plugin:
androidPluginVersionTip=Version of Android Gradle plugin.
robovmVersion=RoboVM version:
robovmVersionTip=Version of RoboVM framework used by the default iOS backend.
moeVersion=MOE version:
moeVersionTip=Version of Intel's Multi-OS Engine used by the iOS-MOE backend.
javaVersion=Java version:
javaVersionTip=Used as source compatibility value. 1.6 is advised if you plan to target platforms other than desktop.
serverJavaVersion=Server Java version:
serverJavaVersionTip=Used as source compatibility value in headless and server applications. 1.8 is the latest stable and widely used Java version.
desktopJavaVersion=Desktop Java version:
desktopJavaVersionTip=Used as source compatibility value in desktop applications. At least 1.7 is required by desktop dependency libraries.
generateSkin=Add GUI assets
generateSkinTip=If checked, generator will create "raw" directory with some simple GUI assets and add "pack" task to root Gradle project that allows you to quickly create an atlas. Note: atlas not included, generate it with "gradle pack" task.
generateUsl=Add USL assets
generateUslTip=If checked, generator will create folder "raw" with example USL file and will add "compileSkin" task which allows to quickly compile USL skin into JSON file. Skin is initially not compiled, run "gradle compileSkin" before using it.
generateReadme=Add README
generateReadmeTip=Generates README.md file, commonly used to describe the project. The file will include a simple description and some tips on Gradle tasks that might prove useful.
gradleWrapper=Add Gradle wrapper
gradleWrapperTip=If checked, generator will create executable "gradlew" and "gradlew.bat" files, which allow you to run Gradle application without globally installing it. If it's already installed globally, you can turn this off to limit the total size of project's files.
gradleTasksPrompt=Enter Gradle tasks to run after project generation.
gradleTasksTip=The generator can can optionally run Gradle tasks after your project is ready. If you include the Gradle wrapper, it will be used to execute the tasks - otherwise it is assumed that Gradle is globally installed and available through "gradle" command. You don't need to enter "gradle" or "gradlew" manually, just list the tasks. Suggested tasks:\n- pack - if raw skin assets were included, generates skin atlas.\n- idea - generates IntelliJ project data.\n- eclipse - generates Eclipse project data.\n- desktop:run - runs the desktop application, allowing you to test the project template.
gdxSkinsPrompt=Looking for Scene2D skins? See gdx-skins project!

formValid=Your project data is correct!
generate=Generate project!

generationTitle=Generating...
generationPrompt=Generating a new project, please wait.
closeDialog=Return to main view
exit=Exit application
copyStart=Preparing the project...
copyEnd=Project files copied.
copyGradle=Copied Gradle wrapper.
runningGradleTasks=Running Gradle tasks:
generationEnd=The project is ready. In most modern IDEs you can import it as a Gradle project. Useful Gradle tasks:\n- idea - generates IntelliJ project\n- eclipse - generates Eclipse project\n- pack - packs GUI atlas (if GUI assets generation was chosen in advanced tab)\n- desktop:run - runs the desktop application.\n- gwt:superDev - compiles GWT application and allows you to debug it at localhost:8080/gwt
generationFail=Unable to generate project due to an exception. Try again.
